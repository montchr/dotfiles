/* global finicky */

// Browsers
const FIREFOX = 'org.mozilla.firefox';
const FIREFOX_DEV = 'org.mozilla.firefoxdeveloperedition';
const CHROME = 'com.google.Chrome';

const DEFAULT_BROWSER = FIREFOX;
const WORK_BROWSER = CHROME;

// Source applications
const AIRMAIL = 'it.bloop.airmail2';
const ALFRED = 'com.runningwithcrayons.Alfred-3';
const CAPRINE = 'com.sindresorhus.caprine';
const DASH = 'com.kapeli.dashdoc';
const FANTASTICAL = 'com.flexibits.fantastical2.mac';
const HARVEST = 'com.getharvest.harvestx';
const ITERM = 'com.googlecode.iterm2';
const NOTEPLAN = 'co.noteplan.NotePlan';
const SLACK = 'com.tinyspeck.slackmacgap';
const TASKPAPER = 'com.hogbaysoftware.TaskPaper3.direct';
const TWEETBOT = 'com.tapbots.Tweetbot3Mac';
const VSCODE = 'com.microsoft.VSCode';

const EMPLOYER = 'alley';


finicky.setDefaultBrowser(DEFAULT_BROWSER);

finicky.onUrl((url, opts) => {
  let browser = DEFAULT_BROWSER;
  const flags = opts.flags;
  if (flags.cmd) {
    browser = FIREFOX;
  }
  return {
    bundleIdentifier: browser
  };
});

// Open social network links in Firefox
finicky.onUrl((url, opts) => {
  let browser = DEFAULT_BROWSER;
  if (url.match(/^https?:\/\/(github|atlassian|alley|google)\./)) {
    browser = WORK_BROWSER;
  }
  return {
    bundleIdentifier: browser
  };
});

// Open Spotify links in client
finicky.onUrl((url, opts) => {
  if (url.match(/^https?:\/\/open\.spotify\.com/)) {
    return {
      bundleIdentifier: "com.spotify.client"
    };
  }
});

// Rewrite all Bing links to DuckDuckGo instead
finicky.onUrl((url, opts) => {
  var url = url.replace(
    /^https?:\/\/www\.bing\.com\/search/,
    "https://duckduckgo.com"
  );
  return {
    url: url
  };
});

// Always open links from some applications in specific browsers
finicky.onUrl((url, opts) => {
  let browser = DEFAULT_BROWSER;
  const sourceApplication = opts && opts.sourceBundleIdentifier;
  switch (sourceApplication) {
    case ALFRED:
    case CAPRINE:
      browser = FIREFOX;
      break;
    case DASH:
    case FANTASTICAL:
    case HARVEST:
    case ITERM:
    case NOTEPLAN:
    case SLACK:
    case TASKPAPER:
    case VSCODE:
      browser = WORK_BROWSER;
      break;
    default:
      break;
  }
  return {
    bundleIdentifier: browser
  };
});

// By supplying an array of bundle identifiers, finicky opens the url in the first one
// that's currently running. If none are running, the first app in the array is started.
// finicky.onUrl((url, opts) => {
//   return {
//     bundleIdentifier: [
//       "org.mozilla.firefox",
//       "com.apple.Safari",
//       "com.google.Chrome"
//     ]
//   };
// });
