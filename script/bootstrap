#!/usr/bin/env bash
#
# bootstrap installs things.

set -e

DOTFILES_ROOT="$(pwd)"
# Because oh-my-zsh hasn't yet set up $ZSH, declare it here first
ZSH="$HOME/.oh-my-zsh"

echo ''

# Include utilities
source "$HOME/.dotfiles/lib/utils.zsh"

setup_gitconfig () {
  if ! [ -f git/gitconfig.symlink ]
  then
    e_header 'Setup gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi

    e_header ' - What is your github author name?'
    read -e git_authorname
    e_header ' - What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.symlink.example > git/gitconfig.symlink

    e_success 'gitconfig'
  fi
}

install_dotfiles () {
  e_header 'Installing dotfiles'

  overwrite_all=false
  backup_all=false
  skip_all=false

  for source in `find $DOTFILES_ROOT -maxdepth 2 -name \*.symlink`
  do
    dest="$HOME/.`basename \"${source%.*}\"`"

    if [ -f $dest ] || [ -d $dest ]
    then

      overwrite=false
      backup=false
      skip=false

      if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
      then
        e_header "File already exists: $(basename "$source"), what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi

      if [ "$overwrite" == "true" ] || [ "$overwrite_all" == "true" ]
      then
        rm -rf "$dest"
        e_success "removed $dest"
      fi

      if [ "$backup" == "true" ] || [ "$backup_all" == "true" ]
      then
        mv "$dest" "$dest\.backup"
        e_success "moved $dest to $dest.backup"
      fi

      if [ "$skip" == "false" ] && [ "$skip_all" == "false" ]
      then
        link_files "$source" "$dest"
      else
        e_success "skipped $source"
      fi

    else
      link_files "$source" "$dest"
    fi

  done
}

install_ohmyzsh () {
  # Install oh-my-zsh if it's not already installed
  if ! [ -d "$HOME/.oh-my-zsh" ]
    then
    e_header "Installing oh-my-zsh"
    curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh
    [[ $? ]] && e_success "Done"

    # Move our `.zshrc` back into place after oh-my-zsh setup
    mv "$HOME/.zshrc.pre-oh-my-zsh" "$HOME/.zshrc"

    # Link the `./oh-my-zsh/custom` directory to its place in `~/.oh-my-zsh`
    if [[ -d $ZSH/custom ]]; then
      rm -rf "$ZSH/custom"
    fi
    ln -Fs "$DOTFILES/oh-my-zsh/custom" "$ZSH/custom"
  fi
}

change_shell () {
  # Change default shell to Homebrew-installed zsh
  if ! [ "$SHELL" = "$(command -v zsh)" ]; then
    e_header "Changing login shell to the latest version of ZSH in your PATH..."
    command -v zsh | sudo tee -a /etc/shells
    sudo chsh -s "$(command -v zsh)" "${USER}"
  fi
}

copy_fonts () {
  # Install patched common fixed-width fonts from Powerline
  cd "$DOTFILES_ROOT/lib/powerline-fonts"
  e_header "Installing Powerline fonts"
  cp -f ./**/*.ttf ~/Library/Fonts/
  cp -f ./**/*.otf ~/Library/Fonts/
  cd "$DOTFILES"
}

vim_go () {
  # Install much Vim
  #
  # From @necolas' dotfiles
  #
  # Note that the `.symlink` files will still (needlessly) exist in the
  # symlinked `~/.vim` directory, but they won't do anyone any harm there.
  e_header "Installing Vim things"
  ln -Fhfs "$DOTFILES_ROOT/vim" "$HOME/.vim"
  e_success "You now has much Vim things"
}

setup_gitconfig
install_dotfiles
vim_go

# If we're on a Mac, let's install and setup homebrew.
if [ "$(uname -s)" == "Darwin" ]
then
  e_header "Installing dependencies"
  source bin/dot 2> /tmp/dotfiles-dot
  if [[ $? ]]
  then
    e_success "Dependencies installed"
  else
    e_fail "Error installing dependencies"
  fi
fi

install_ohmyzsh
change_shell
copy_fonts

echo ''
echo '  All installed!'
echo ''
