#!/bin/bash
#
# bootstrap installs things.

set -e

DOTFILES_ROOT="$(pwd)"

echo ''

# Include utilities
source "$HOME/.dotfiles/lib/utils.zsh"

setup_gitconfig () {
  local_config="git/gitconfig.local.symlink"
  if ! [ -f $local_config ]
  then
    e_header 'Setup gitconfig'


    if [ "$(uname -s)" == "Darwin" ]; then
      cp git/gitconfig-macos.symlink.example $local_config
    elif [ $(uname -s) == "Linux" ]; then
      cp git/gitconfig-linux.symlink.example $local_config
    fi

    e_header ' - What is your github author name?'
    read -e git_authorname
    e_header ' - What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" $local_config

    e_success 'gitconfig'
  fi
}

install_dotfiles () {
  e_header 'Installing dotfiles'

  overwrite_all=false
  backup_all=false
  skip_all=false

  for source in `find $DOTFILES_ROOT -maxdepth 2 -name \*.symlink`
  do
    dest="$HOME/.`basename \"${source%.*}\"`"

    if [ -f $dest ] || [ -d $dest ]
    then

      overwrite=false
      backup=false
      skip=false

      if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
      then
        e_header "File already exists: $(basename "$source"), what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi

      if [ "$overwrite" == "true" ] || [ "$overwrite_all" == "true" ]
      then
        rm -rf "$dest"
        e_success "removed $dest"
      fi

      if [ "$backup" == "true" ] || [ "$backup_all" == "true" ]
      then
        mv "$dest" "$dest\.backup"
        e_success "moved $dest to $dest.backup"
      fi

      if [ "$skip" == "false" ] && [ "$skip_all" == "false" ]
      then
        link_files "$source" "$dest"
      else
        e_success "skipped $source"
      fi

    else
      link_files "$source" "$dest"
    fi

  done
}

set_fish_shell() {
  if grep --quiet fish <<< "$SHELL"; then
    success "Fish shell is already set up."
  else
    e_header "Adding fish executable to /etc/shells"
    if grep --fixed-strings --line-regexp --quiet "$(brew --prefix)/bin/fish" /etc/shells; then
      e_success "Fish executable already exists in /etc/shells."
    else
      if sudo bash -c "echo $(brew --prefix)/bin/fish >> /etc/shells"; then
        e_success "Fish executable added to /etc/shells."
      else
        e_error "Failed adding Fish executable to /etc/shells."
        return 1
      fi
    fi
    e_header "Changing shell to fish"
    if chsh -s $(brew --prefix)/bin/fish; then
      e_success "Changed shell to fish"
    else
      e_error "Failed changing shell to fish"
      return 2
    fi
    if [ ! -L "$HOME/.config/fish" ]; then
      rm -rf "$HOME/.config/fish"
      ln -s "$DOTFILES" "$HOME/.config/fish"
    fi
  fi
}

vim_go () {
  # Install much Vim
  #
  # From @necolas' dotfiles
  #
  # Note that the `.symlink` files will still (needlessly) exist in the
  # symlinked `~/.vim` directory, but they won't do any harm there.
  e_header "Installing Vim things"
  ln -Ffs "$DOTFILES_ROOT/vim" "$HOME/.vim"
  e_success "Vim things installed."
}

setup_gitconfig
install_dotfiles
vim_go

# Set macOS defaults
if [ "$(uname -s)" == "Darwin" ]; then
  $DOTFILES_ROOT/macos/set-defaults.sh
fi

if test ! $(which brew)
then
  e_header "Installing Homebrew"

  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
fi

if [ ! -f "$DOTFILES_ROOT/Brewfile" ] && [ ! -L "$DOTFILES_ROOT/Brewfile" ]; then
  if [ "$(uname -s)" == "Darwin" ]; then
    cp "$DOTFILES_ROOT/Brewfile.macos.example" "$DOTFILES_ROOT/Brewfile"
  else
    cp "$DOTFILES_ROOT/Brewfile.linux.example" "$DOTFILES_ROOT/Brewfile"
  fi
fi

e_header "Installing dependencies"
  source bin/dot 2> /tmp/dotfiles-dot
  if [[ $? ]]
  then
    e_success "Dependencies installed"
  else
    e_fail "Error installing dependencies"
  fi

set_fish_shell

echo ''
echo '  All installed!'
echo ''
